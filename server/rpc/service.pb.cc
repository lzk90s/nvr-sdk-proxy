// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#include "service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace sdkproxy {
class HttpRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HttpRequest> _instance;
} _HttpRequest_default_instance_;
class HttpResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HttpResponse> _instance;
} _HttpResponse_default_instance_;
}  // namespace sdkproxy
static void InitDefaultsscc_info_HttpRequest_service_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdkproxy::_HttpRequest_default_instance_;
    new (ptr) ::sdkproxy::HttpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdkproxy::HttpRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HttpRequest_service_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HttpRequest_service_2eproto}, {}};

static void InitDefaultsscc_info_HttpResponse_service_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdkproxy::_HttpResponse_default_instance_;
    new (ptr) ::sdkproxy::HttpResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdkproxy::HttpResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HttpResponse_service_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HttpResponse_service_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_service_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_service_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_service_2eproto[8];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_service_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdkproxy::HttpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdkproxy::HttpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sdkproxy::HttpRequest)},
  { 5, -1, sizeof(::sdkproxy::HttpResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdkproxy::_HttpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdkproxy::_HttpResponse_default_instance_),
};

const char descriptor_table_protodef_service_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rservice.proto\022\010sdkproxy\"\r\n\013HttpRequest"
  "\"\016\n\014HttpResponse2\214\001\n\022DeviceQueryService\022"
  "<\n\tDiscovery\022\025.sdkproxy.HttpRequest\032\026.sd"
  "kproxy.HttpResponse\"\000\0228\n\005Query\022\025.sdkprox"
  "y.HttpRequest\032\026.sdkproxy.HttpResponse\"\0002"
  "M\n\021RealStreamService\0228\n\005Start\022\025.sdkproxy"
  ".HttpRequest\032\026.sdkproxy.HttpResponse\"\0002\211"
  "\001\n\nVodService\0228\n\005Query\022\025.sdkproxy.HttpRe"
  "quest\032\026.sdkproxy.HttpResponse\"\000\022A\n\016Downl"
  "oadByTime\022\025.sdkproxy.HttpRequest\032\026.sdkpr"
  "oxy.HttpResponse\"\0002\374\001\n\023EventAnalyzeServi"
  "ce\0228\n\005Reset\022\025.sdkproxy.HttpRequest\032\026.sdk"
  "proxy.HttpResponse\"\000\0228\n\005Query\022\025.sdkproxy"
  ".HttpRequest\032\026.sdkproxy.HttpResponse\"\000\0228"
  "\n\005Start\022\025.sdkproxy.HttpRequest\032\026.sdkprox"
  "y.HttpResponse\"\000\0227\n\004Stop\022\025.sdkproxy.Http"
  "Request\032\026.sdkproxy.HttpResponse\"\0002J\n\rHea"
  "lthService\0229\n\006Health\022\025.sdkproxy.HttpRequ"
  "est\032\026.sdkproxy.HttpResponse\"\0002\205\001\n\rConfig"
  "Service\0229\n\006GetFtp\022\025.sdkproxy.HttpRequest"
  "\032\026.sdkproxy.HttpResponse\"\000\0229\n\006SetFtp\022\025.s"
  "dkproxy.HttpRequest\032\026.sdkproxy.HttpRespo"
  "nse\"\0002Z\n\027VisitorsFlowRateService\022\?\n\014Quer"
  "yHistory\022\025.sdkproxy.HttpRequest\032\026.sdkpro"
  "xy.HttpResponse\"\0002\026\n\024EntranceGuardServic"
  "eB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_service_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_service_2eproto_sccs[2] = {
  &scc_info_HttpRequest_service_2eproto.base,
  &scc_info_HttpResponse_service_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_service_2eproto_once;
static bool descriptor_table_service_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_2eproto = {
  &descriptor_table_service_2eproto_initialized, descriptor_table_protodef_service_2eproto, "service.proto", 1014,
  &descriptor_table_service_2eproto_once, descriptor_table_service_2eproto_sccs, descriptor_table_service_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_service_2eproto::offsets,
  file_level_metadata_service_2eproto, 2, file_level_enum_descriptors_service_2eproto, file_level_service_descriptors_service_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_service_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_service_2eproto), true);
namespace sdkproxy {

// ===================================================================

void HttpRequest::InitAsDefaultInstance() {
}
class HttpRequest::_Internal {
 public:
};

HttpRequest::HttpRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdkproxy.HttpRequest)
}
HttpRequest::HttpRequest(const HttpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sdkproxy.HttpRequest)
}

void HttpRequest::SharedCtor() {
}

HttpRequest::~HttpRequest() {
  // @@protoc_insertion_point(destructor:sdkproxy.HttpRequest)
  SharedDtor();
}

void HttpRequest::SharedDtor() {
}

void HttpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HttpRequest& HttpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HttpRequest_service_2eproto.base);
  return *internal_default_instance();
}


void HttpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sdkproxy.HttpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* HttpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HttpRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdkproxy.HttpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdkproxy.HttpRequest)
  return target;
}

size_t HttpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdkproxy.HttpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HttpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdkproxy.HttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HttpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdkproxy.HttpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdkproxy.HttpRequest)
    MergeFrom(*source);
  }
}

void HttpRequest::MergeFrom(const HttpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdkproxy.HttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HttpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdkproxy.HttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpRequest::CopyFrom(const HttpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdkproxy.HttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpRequest::IsInitialized() const {
  return true;
}

void HttpRequest::InternalSwap(HttpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HttpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HttpResponse::InitAsDefaultInstance() {
}
class HttpResponse::_Internal {
 public:
};

HttpResponse::HttpResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdkproxy.HttpResponse)
}
HttpResponse::HttpResponse(const HttpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sdkproxy.HttpResponse)
}

void HttpResponse::SharedCtor() {
}

HttpResponse::~HttpResponse() {
  // @@protoc_insertion_point(destructor:sdkproxy.HttpResponse)
  SharedDtor();
}

void HttpResponse::SharedDtor() {
}

void HttpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HttpResponse& HttpResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HttpResponse_service_2eproto.base);
  return *internal_default_instance();
}


void HttpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sdkproxy.HttpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* HttpResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HttpResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdkproxy.HttpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdkproxy.HttpResponse)
  return target;
}

size_t HttpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdkproxy.HttpResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HttpResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdkproxy.HttpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HttpResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdkproxy.HttpResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdkproxy.HttpResponse)
    MergeFrom(*source);
  }
}

void HttpResponse::MergeFrom(const HttpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdkproxy.HttpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HttpResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdkproxy.HttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpResponse::CopyFrom(const HttpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdkproxy.HttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpResponse::IsInitialized() const {
  return true;
}

void HttpResponse::InternalSwap(HttpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HttpResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DeviceQueryService::~DeviceQueryService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DeviceQueryService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_service_descriptors_service_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DeviceQueryService::GetDescriptor() {
  return descriptor();
}

void DeviceQueryService::Discovery(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::sdkproxy::HttpRequest*,
                         ::sdkproxy::HttpResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Discovery() not implemented.");
  done->Run();
}

void DeviceQueryService::Query(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::sdkproxy::HttpRequest*,
                         ::sdkproxy::HttpResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Query() not implemented.");
  done->Run();
}

void DeviceQueryService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_service_2eproto[0]);
  switch(method->index()) {
    case 0:
      Discovery(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::sdkproxy::HttpRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::sdkproxy::HttpResponse*>(
                 response),
             done);
      break;
    case 1:
      Query(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::sdkproxy::HttpRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::sdkproxy::HttpResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DeviceQueryService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sdkproxy::HttpRequest::default_instance();
    case 1:
      return ::sdkproxy::HttpRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DeviceQueryService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sdkproxy::HttpResponse::default_instance();
    case 1:
      return ::sdkproxy::HttpResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

DeviceQueryService_Stub::DeviceQueryService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DeviceQueryService_Stub::DeviceQueryService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
DeviceQueryService_Stub::~DeviceQueryService_Stub() {
  if (owns_channel_) delete channel_;
}

void DeviceQueryService_Stub::Discovery(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::sdkproxy::HttpRequest* request,
                              ::sdkproxy::HttpResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void DeviceQueryService_Stub::Query(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::sdkproxy::HttpRequest* request,
                              ::sdkproxy::HttpResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
// ===================================================================

RealStreamService::~RealStreamService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RealStreamService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_service_descriptors_service_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RealStreamService::GetDescriptor() {
  return descriptor();
}

void RealStreamService::Start(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::sdkproxy::HttpRequest*,
                         ::sdkproxy::HttpResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Start() not implemented.");
  done->Run();
}

void RealStreamService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_service_2eproto[1]);
  switch(method->index()) {
    case 0:
      Start(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::sdkproxy::HttpRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::sdkproxy::HttpResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RealStreamService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sdkproxy::HttpRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RealStreamService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sdkproxy::HttpResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RealStreamService_Stub::RealStreamService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RealStreamService_Stub::RealStreamService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
RealStreamService_Stub::~RealStreamService_Stub() {
  if (owns_channel_) delete channel_;
}

void RealStreamService_Stub::Start(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::sdkproxy::HttpRequest* request,
                              ::sdkproxy::HttpResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

VodService::~VodService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* VodService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_service_descriptors_service_2eproto[2];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* VodService::GetDescriptor() {
  return descriptor();
}

void VodService::Query(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::sdkproxy::HttpRequest*,
                         ::sdkproxy::HttpResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Query() not implemented.");
  done->Run();
}

void VodService::DownloadByTime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::sdkproxy::HttpRequest*,
                         ::sdkproxy::HttpResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DownloadByTime() not implemented.");
  done->Run();
}

void VodService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_service_2eproto[2]);
  switch(method->index()) {
    case 0:
      Query(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::sdkproxy::HttpRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::sdkproxy::HttpResponse*>(
                 response),
             done);
      break;
    case 1:
      DownloadByTime(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::sdkproxy::HttpRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::sdkproxy::HttpResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& VodService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sdkproxy::HttpRequest::default_instance();
    case 1:
      return ::sdkproxy::HttpRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& VodService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sdkproxy::HttpResponse::default_instance();
    case 1:
      return ::sdkproxy::HttpResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

VodService_Stub::VodService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
VodService_Stub::VodService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
VodService_Stub::~VodService_Stub() {
  if (owns_channel_) delete channel_;
}

void VodService_Stub::Query(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::sdkproxy::HttpRequest* request,
                              ::sdkproxy::HttpResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void VodService_Stub::DownloadByTime(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::sdkproxy::HttpRequest* request,
                              ::sdkproxy::HttpResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
// ===================================================================

EventAnalyzeService::~EventAnalyzeService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* EventAnalyzeService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_service_descriptors_service_2eproto[3];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* EventAnalyzeService::GetDescriptor() {
  return descriptor();
}

void EventAnalyzeService::Reset(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::sdkproxy::HttpRequest*,
                         ::sdkproxy::HttpResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Reset() not implemented.");
  done->Run();
}

void EventAnalyzeService::Query(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::sdkproxy::HttpRequest*,
                         ::sdkproxy::HttpResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Query() not implemented.");
  done->Run();
}

void EventAnalyzeService::Start(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::sdkproxy::HttpRequest*,
                         ::sdkproxy::HttpResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Start() not implemented.");
  done->Run();
}

void EventAnalyzeService::Stop(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::sdkproxy::HttpRequest*,
                         ::sdkproxy::HttpResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Stop() not implemented.");
  done->Run();
}

void EventAnalyzeService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_service_2eproto[3]);
  switch(method->index()) {
    case 0:
      Reset(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::sdkproxy::HttpRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::sdkproxy::HttpResponse*>(
                 response),
             done);
      break;
    case 1:
      Query(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::sdkproxy::HttpRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::sdkproxy::HttpResponse*>(
                 response),
             done);
      break;
    case 2:
      Start(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::sdkproxy::HttpRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::sdkproxy::HttpResponse*>(
                 response),
             done);
      break;
    case 3:
      Stop(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::sdkproxy::HttpRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::sdkproxy::HttpResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& EventAnalyzeService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sdkproxy::HttpRequest::default_instance();
    case 1:
      return ::sdkproxy::HttpRequest::default_instance();
    case 2:
      return ::sdkproxy::HttpRequest::default_instance();
    case 3:
      return ::sdkproxy::HttpRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& EventAnalyzeService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sdkproxy::HttpResponse::default_instance();
    case 1:
      return ::sdkproxy::HttpResponse::default_instance();
    case 2:
      return ::sdkproxy::HttpResponse::default_instance();
    case 3:
      return ::sdkproxy::HttpResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

EventAnalyzeService_Stub::EventAnalyzeService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
EventAnalyzeService_Stub::EventAnalyzeService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
EventAnalyzeService_Stub::~EventAnalyzeService_Stub() {
  if (owns_channel_) delete channel_;
}

void EventAnalyzeService_Stub::Reset(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::sdkproxy::HttpRequest* request,
                              ::sdkproxy::HttpResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void EventAnalyzeService_Stub::Query(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::sdkproxy::HttpRequest* request,
                              ::sdkproxy::HttpResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void EventAnalyzeService_Stub::Start(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::sdkproxy::HttpRequest* request,
                              ::sdkproxy::HttpResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void EventAnalyzeService_Stub::Stop(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::sdkproxy::HttpRequest* request,
                              ::sdkproxy::HttpResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
// ===================================================================

HealthService::~HealthService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* HealthService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_service_descriptors_service_2eproto[4];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* HealthService::GetDescriptor() {
  return descriptor();
}

void HealthService::Health(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::sdkproxy::HttpRequest*,
                         ::sdkproxy::HttpResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Health() not implemented.");
  done->Run();
}

void HealthService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_service_2eproto[4]);
  switch(method->index()) {
    case 0:
      Health(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::sdkproxy::HttpRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::sdkproxy::HttpResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& HealthService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sdkproxy::HttpRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& HealthService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sdkproxy::HttpResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

HealthService_Stub::HealthService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
HealthService_Stub::HealthService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
HealthService_Stub::~HealthService_Stub() {
  if (owns_channel_) delete channel_;
}

void HealthService_Stub::Health(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::sdkproxy::HttpRequest* request,
                              ::sdkproxy::HttpResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

ConfigService::~ConfigService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ConfigService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_service_descriptors_service_2eproto[5];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ConfigService::GetDescriptor() {
  return descriptor();
}

void ConfigService::GetFtp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::sdkproxy::HttpRequest*,
                         ::sdkproxy::HttpResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFtp() not implemented.");
  done->Run();
}

void ConfigService::SetFtp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::sdkproxy::HttpRequest*,
                         ::sdkproxy::HttpResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetFtp() not implemented.");
  done->Run();
}

void ConfigService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_service_2eproto[5]);
  switch(method->index()) {
    case 0:
      GetFtp(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::sdkproxy::HttpRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::sdkproxy::HttpResponse*>(
                 response),
             done);
      break;
    case 1:
      SetFtp(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::sdkproxy::HttpRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::sdkproxy::HttpResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ConfigService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sdkproxy::HttpRequest::default_instance();
    case 1:
      return ::sdkproxy::HttpRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ConfigService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sdkproxy::HttpResponse::default_instance();
    case 1:
      return ::sdkproxy::HttpResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ConfigService_Stub::ConfigService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ConfigService_Stub::ConfigService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
ConfigService_Stub::~ConfigService_Stub() {
  if (owns_channel_) delete channel_;
}

void ConfigService_Stub::GetFtp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::sdkproxy::HttpRequest* request,
                              ::sdkproxy::HttpResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ConfigService_Stub::SetFtp(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::sdkproxy::HttpRequest* request,
                              ::sdkproxy::HttpResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
// ===================================================================

VisitorsFlowRateService::~VisitorsFlowRateService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* VisitorsFlowRateService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_service_descriptors_service_2eproto[6];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* VisitorsFlowRateService::GetDescriptor() {
  return descriptor();
}

void VisitorsFlowRateService::QueryHistory(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::sdkproxy::HttpRequest*,
                         ::sdkproxy::HttpResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryHistory() not implemented.");
  done->Run();
}

void VisitorsFlowRateService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_service_2eproto[6]);
  switch(method->index()) {
    case 0:
      QueryHistory(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::sdkproxy::HttpRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::sdkproxy::HttpResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& VisitorsFlowRateService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sdkproxy::HttpRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& VisitorsFlowRateService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sdkproxy::HttpResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

VisitorsFlowRateService_Stub::VisitorsFlowRateService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
VisitorsFlowRateService_Stub::VisitorsFlowRateService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
VisitorsFlowRateService_Stub::~VisitorsFlowRateService_Stub() {
  if (owns_channel_) delete channel_;
}

void VisitorsFlowRateService_Stub::QueryHistory(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::sdkproxy::HttpRequest* request,
                              ::sdkproxy::HttpResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
// ===================================================================

EntranceGuardService::~EntranceGuardService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* EntranceGuardService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_service_2eproto);
  return file_level_service_descriptors_service_2eproto[7];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* EntranceGuardService::GetDescriptor() {
  return descriptor();
}

void EntranceGuardService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_service_2eproto[7]);
  switch(method->index()) {
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& EntranceGuardService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& EntranceGuardService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

EntranceGuardService_Stub::EntranceGuardService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
EntranceGuardService_Stub::EntranceGuardService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
EntranceGuardService_Stub::~EntranceGuardService_Stub() {
  if (owns_channel_) delete channel_;
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sdkproxy
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sdkproxy::HttpRequest* Arena::CreateMaybeMessage< ::sdkproxy::HttpRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sdkproxy::HttpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sdkproxy::HttpResponse* Arena::CreateMaybeMessage< ::sdkproxy::HttpResponse >(Arena* arena) {
  return Arena::CreateInternal< ::sdkproxy::HttpResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
